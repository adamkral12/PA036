config:
#  This structure should hold queries with same meaning
  - sql: INSERT INTO emails_with_events(id, data) VALUES ('0', '{"from":"test@test.com","to":"madmike272@hotmail.com","sent":{"date":"2018-08-01 08:00:00.000000","timezone_type":1,"timezone":"+02:00"},"type":"upcoming_journey","events":[{"event_type":"delivery","user_agent":{"browser":null,"platform":null},"position":{"country":null,"city":null,"geographical":{"lat":null,"long":null}},"received":{"date":"2018-08-01 08:04:27.000000","timezone_type":1,"timezone":"+02:00"},"occurred":{"date":"2018-08-01 07:59:59.000000","timezone_type":1,"timezone":"+02:00"},"email_id":"c0b7a14f34d345eda2666d5159c288de"}, {"event_type":"delivery","user_agent":{"browser":null,"platform":null},"position":{"country":null,"city":null,"geographical":{"lat":null,"long":null}},"received":{"date":"2018-08-01 08:04:27.000000","timezone_type":1,"timezone":"+02:00"},"occurred":{"date":"2018-08-01 07:59:59.000000","timezone_type":1,"timezone":"+02:00"},"email_id":"c0b74f34d345eda2666d5159c288de"}],"id":"c0b74f34d345eda2666d5159c288de"}')
    mongo:
      method: find
      query:
        id: c0b7a14f34d345eda2666d5159c288de
    description: "Insert one email"

  - sql: INSERT INTO emails_with_events(id, data) VALUES ('11', '{"from":"test@test.com","to":"madmike272@hotmail.com","sent":{"date":"2018-08-01 08:00:00.000000","timezone_type":1,"timezone":"+02:00"},"type":"upcoming_journey","events":[{"event_type":"delivery","user_agent":{"browser":null,"platform":null},"position":{"country":null,"city":null,"geographical":{"lat":null,"long":null}},"received":{"date":"2018-08-01 08:04:27.000000","timezone_type":1,"timezone":"+02:00"},"occurred":{"date":"2018-08-01 07:59:59.000000","timezone_type":1,"timezone":"+02:00"},"email_id":"c0b7a14f34d345eda2666d5159c288de"}, {"event_type":"delivery","user_agent":{"browser":null,"platform":null},"position":{"country":null,"city":null,"geographical":{"lat":null,"long":null}},"received":{"date":"2018-08-01 08:04:27.000000","timezone_type":1,"timezone":"+02:00"},"occurred":{"date":"2018-08-01 07:59:59.000000","timezone_type":1,"timezone":"+02:00"},"email_id":"c0b74f34d345eda2666d5159c288de"}],"id":"c0b74f34d345eda2666d5159c288de"}'), ('1', '{"from":"test@test.com","to":"madmike272@hotmail.com","sent":{"date":"2018-08-01 08:00:00.000000","timezone_type":1,"timezone":"+02:00"},"type":"upcoming_journey","events":[{"event_type":"delivery","user_agent":{"browser":null,"platform":null},"position":{"country":null,"city":null,"geographical":{"lat":null,"long":null}},"received":{"date":"2018-08-01 08:04:27.000000","timezone_type":1,"timezone":"+02:00"},"occurred":{"date":"2018-08-01 07:59:59.000000","timezone_type":1,"timezone":"+02:00"},"email_id":"c0b7a14f34d345eda2666d5159c288de"}],"id":"c0b7a14f34d345eda2666d5159c288de"}'), ('2', '{"from":"test@test.com","to":"madmike272@hotmail.com","sent":{"date":"2018-08-01 08:00:00.000000","timezone_type":1,"timezone":"+02:00"},"type":"upcoming_journey","events":[{"event_type":"delivery","user_agent":{"browser":null,"platform":null},"position":{"country":null,"city":null,"geographical":{"lat":null,"long":null}},"received":{"date":"2018-08-01 08:04:27.000000","timezone_type":1,"timezone":"+02:00"},"occurred":{"date":"2018-08-01 07:59:59.000000","timezone_type":1,"timezone":"+02:00"},"email_id":"c0b7a14f34d345eda2666d5159c288de"}, {"event_type":"delivery","user_agent":{"browser":null,"platform":null},"position":{"country":null,"city":null,"geographical":{"lat":null,"long":null}},"received":{"date":"2018-08-01 08:04:27.000000","timezone_type":1,"timezone":"+02:00"},"occurred":{"date":"2018-08-01 07:59:59.000000","timezone_type":1,"timezone":"+02:00"},"email_id":"c0b74f34d345eda2666d5159c288de"}],"id":"c0b74f34d345eda2666d5159c288de"}'), ('3', '{"from":"test@test.com","to":"madmike272@hotmail.com","sent":{"date":"2018-08-01 08:00:00.000000","timezone_type":1,"timezone":"+02:00"},"type":"upcoming_journey","events":[{"event_type":"delivery","user_agent":{"browser":null,"platform":null},"position":{"country":null,"city":null,"geographical":{"lat":null,"long":null}},"received":{"date":"2018-08-01 08:04:27.000000","timezone_type":1,"timezone":"+02:00"},"occurred":{"date":"2018-08-01 07:59:59.000000","timezone_type":1,"timezone":"+02:00"},"email_id":"c0b7a14f34d345eda2666d5159c288de"}],"id":"c0b7a14f34d345eda2666d5159c288de"}'), ('4', '{"from":"test@test.com","to":"madmike272@hotmail.com","sent":{"date":"2018-08-01 08:00:00.000000","timezone_type":1,"timezone":"+02:00"},"type":"upcoming_journey","events":[{"event_type":"delivery","user_agent":{"browser":null,"platform":null},"position":{"country":null,"city":null,"geographical":{"lat":null,"long":null}},"received":{"date":"2018-08-01 08:04:27.000000","timezone_type":1,"timezone":"+02:00"},"occurred":{"date":"2018-08-01 07:59:59.000000","timezone_type":1,"timezone":"+02:00"},"email_id":"c0b7a14f34d345eda2666d5159c288de"}, {"event_type":"delivery","user_agent":{"browser":null,"platform":null},"position":{"country":null,"city":null,"geographical":{"lat":null,"long":null}},"received":{"date":"2018-08-01 08:04:27.000000","timezone_type":1,"timezone":"+02:00"},"occurred":{"date":"2018-08-01 07:59:59.000000","timezone_type":1,"timezone":"+02:00"},"email_id":"c0b74f34d345eda2666d5159c288de"}],"id":"c0b74f34d345eda2666d5159c288de"}'), ('5', '{"from":"test@test.com","to":"madmike272@hotmail.com","sent":{"date":"2018-08-01 08:00:00.000000","timezone_type":1,"timezone":"+02:00"},"type":"upcoming_journey","events":[{"event_type":"delivery","user_agent":{"browser":null,"platform":null},"position":{"country":null,"city":null,"geographical":{"lat":null,"long":null}},"received":{"date":"2018-08-01 08:04:27.000000","timezone_type":1,"timezone":"+02:00"},"occurred":{"date":"2018-08-01 07:59:59.000000","timezone_type":1,"timezone":"+02:00"},"email_id":"c0b7a14f34d345eda2666d5159c288de"}],"id":"c0b7a14f34d345eda2666d5159c288de"}'), ('6', '{"from":"test@test.com","to":"madmike272@hotmail.com","sent":{"date":"2018-08-01 08:00:00.000000","timezone_type":1,"timezone":"+02:00"},"type":"upcoming_journey","events":[{"event_type":"delivery","user_agent":{"browser":null,"platform":null},"position":{"country":null,"city":null,"geographical":{"lat":null,"long":null}},"received":{"date":"2018-08-01 08:04:27.000000","timezone_type":1,"timezone":"+02:00"},"occurred":{"date":"2018-08-01 07:59:59.000000","timezone_type":1,"timezone":"+02:00"},"email_id":"c0b7a14f34d345eda2666d5159c288de"}, {"event_type":"delivery","user_agent":{"browser":null,"platform":null},"position":{"country":null,"city":null,"geographical":{"lat":null,"long":null}},"received":{"date":"2018-08-01 08:04:27.000000","timezone_type":1,"timezone":"+02:00"},"occurred":{"date":"2018-08-01 07:59:59.000000","timezone_type":1,"timezone":"+02:00"},"email_id":"c0b74f34d345eda2666d5159c288de"}],"id":"c0b74f34d345eda2666d5159c288de"}'), ('7', '{"from":"test@test.com","to":"madmike272@hotmail.com","sent":{"date":"2018-08-01 08:00:00.000000","timezone_type":1,"timezone":"+02:00"},"type":"upcoming_journey","events":[{"event_type":"delivery","user_agent":{"browser":null,"platform":null},"position":{"country":null,"city":null,"geographical":{"lat":null,"long":null}},"received":{"date":"2018-08-01 08:04:27.000000","timezone_type":1,"timezone":"+02:00"},"occurred":{"date":"2018-08-01 07:59:59.000000","timezone_type":1,"timezone":"+02:00"},"email_id":"c0b7a14f34d345eda2666d5159c288de"}],"id":"c0b7a14f34d345eda2666d5159c288de"}'), ('8', '{"from":"test@test.com","to":"madmike272@hotmail.com","sent":{"date":"2018-08-01 08:00:00.000000","timezone_type":1,"timezone":"+02:00"},"type":"upcoming_journey","events":[{"event_type":"delivery","user_agent":{"browser":null,"platform":null},"position":{"country":null,"city":null,"geographical":{"lat":null,"long":null}},"received":{"date":"2018-08-01 08:04:27.000000","timezone_type":1,"timezone":"+02:00"},"occurred":{"date":"2018-08-01 07:59:59.000000","timezone_type":1,"timezone":"+02:00"},"email_id":"c0b7a14f34d345eda2666d5159c288de"}, {"event_type":"delivery","user_agent":{"browser":null,"platform":null},"position":{"country":null,"city":null,"geographical":{"lat":null,"long":null}},"received":{"date":"2018-08-01 08:04:27.000000","timezone_type":1,"timezone":"+02:00"},"occurred":{"date":"2018-08-01 07:59:59.000000","timezone_type":1,"timezone":"+02:00"},"email_id":"c0b74f34d345eda2666d5159c288de"}],"id":"c0b74f34d345eda2666d5159c288de"}'), ('9', '{"from":"test@test.com","to":"madmike272@hotmail.com","sent":{"date":"2018-08-01 08:00:00.000000","timezone_type":1,"timezone":"+02:00"},"type":"upcoming_journey","events":[{"event_type":"delivery","user_agent":{"browser":null,"platform":null},"position":{"country":null,"city":null,"geographical":{"lat":null,"long":null}},"received":{"date":"2018-08-01 08:04:27.000000","timezone_type":1,"timezone":"+02:00"},"occurred":{"date":"2018-08-01 07:59:59.000000","timezone_type":1,"timezone":"+02:00"},"email_id":"c0b7a14f34d345eda2666d5159c288de"}],"id":"c0b7a14f34d345eda2666d5159c288de"}'), ('10', '{"from":"test@test.com","to":"madmike272@hotmail.com","sent":{"date":"2018-08-01 08:00:00.000000","timezone_type":1,"timezone":"+02:00"},"type":"upcoming_journey","events":[{"event_type":"delivery","user_agent":{"browser":null,"platform":null},"position":{"country":null,"city":null,"geographical":{"lat":null,"long":null}},"received":{"date":"2018-08-01 08:04:27.000000","timezone_type":1,"timezone":"+02:00"},"occurred":{"date":"2018-08-01 07:59:59.000000","timezone_type":1,"timezone":"+02:00"},"email_id":"c0b7a14f34d345eda2666d5159c288de"}, {"event_type":"delivery","user_agent":{"browser":null,"platform":null},"position":{"country":null,"city":null,"geographical":{"lat":null,"long":null}},"received":{"date":"2018-08-01 08:04:27.000000","timezone_type":1,"timezone":"+02:00"},"occurred":{"date":"2018-08-01 07:59:59.000000","timezone_type":1,"timezone":"+02:00"},"email_id":"c0b74f34d345eda2666d5159c288de"}],"id":"c0b74f34d345eda2666d5159c288de"}')
    mongo:
      method: find
      query:
        id: c0b7a14f34d345eda2666d5159c288de
    description: "Insert 11 emails, 1 or 2 events each"

  - sql: UPDATE emails_with_events SET data = jsonb_insert(data::jsonb, '{events, 0}'::text[], jsonb '{"event_type":"test","user_agent":{"browser":null,"platform":null},"position":{"country":null,"city":null,"geographical":{"lat":null,"long":null}},"received":{"date":"2018-08-01 08:04:27.000000","timezone_type":1,"timezone":"+02:00"},"occurred":{"date":"2018-08-01 07:59:59.000000","timezone_type":1,"timezone":"+02:00"},"email_id":"test"}') WHERE (data ->> 'type') = 'verify_email'
    mongo:
      method: find
      query:
        id: c0b7a14f34d345eda2666d5159c288de
    description: "Insert one event to existing Emails"

  - sql: DELETE FROM emails_with_events WHERE (data ->> 'from') LIKE '%@yahoo.com'
    mongo:
      method: find
      query:
        id: c0b7a14f34d345eda2666d5159c288de
    description: "Delete email by from email"

  - sql: DELETE FROM emails_with_events WHERE id in (SELECT id FROM (SELECT id, json_array_elements(data -> 'events') -> 'user_agent' ->> 'platform' as device FROM emails_with_events) as platforms WHERE device = 'Android')
    mongo:
      method: find
      query:
        id: c0b7a14f34d345eda2666d5159c288de
    description: "Delete email by event platform - Android "

  - sql: UPDATE emails_with_events e SET data=jsonb_set(data::jsonb, '{events}'::text[], e2.events::jsonb) FROM (SELECT id, json_agg(singleevent) as events FROM (SELECT id, json_array_elements(data -> 'events') as singleevent, json_array_elements(data -> 'events') -> 'user_agent' ->> 'platform' as device FROM emails_with_events) as eventarray WHERE device != 'Linux' GROUP BY id) e2 WHERE e.id = e2.id
    mongo:
      method: find
      query:
        id: c0b7a14f34d345eda2666d5159c288de
    description: "Delete event from emails by event platform - Linux"

  - sql: UPDATE emails_with_events e SET data=jsonb_set(data::jsonb, '{events}'::text[], e2.events::jsonb) FROM (SELECT id, json_agg(singleevent) as events FROM (SELECT id, json_array_elements(data -> 'events') as singleevent, json_array_elements(data -> 'events') ->> 'event_type' as eventtype FROM emails_with_events) as eventarray WHERE eventtype != 'delivery' GROUP BY id) e2 WHERE e.id = e2.id
    mongo:
      method: Delete event
      query:
        id: c0b7a14f34d345eda2666d5159c288de
    description: "Delete event from emails by event type - delivery"

  - sql: UPDATE emails_with_events SET data=jsonb_set(data::jsonb, '{from}'::text[], '"test@test.com"'::jsonb) WHERE (data ->> 'from') LIKE '%@hotmail.com'
    mongo:
      method: find
      query:
        id: c0b7a14f34d345eda2666d5159c288de
    description: "Update email from field"

  - sql: UPDATE emails_with_events e SET data=jsonb_set(data::jsonb, '{events}'::text[], e2.events::jsonb) FROM (SELECT id, json_agg(replaced) as events FROM (SELECT id, jsonb_set(singleevent::jsonb, '{user_agent, platform}'::text[], format('"%s"', coalesce((singleevent -> 'user_agent' ->> 'platform'), 'test'))::jsonb) as replaced FROM (SELECT id, json_array_elements(data -> 'events') as singleevent FROM emails_with_events) as replace) as new GROUP BY id) e2 WHERE e.id = e2.id
    mongo:
      method: find
      query:
        id: c0b7a14f34d345eda2666d5159c288de
    description: "Update event device where null"

  - sql: UPDATE emails_with_events e SET data=jsonb_set(data::jsonb, '{events}'::text[], e2.events::jsonb) FROM (SELECT id, json_agg(replaced) as events FROM (SELECT id, jsonb_set(singleevent::jsonb, '{position, city}'::text[], format('"%s"', coalesce((singleevent -> 'position' ->> 'city'), 'test'))::jsonb) as replaced FROM (SELECT id, json_array_elements(data -> 'events') as singleevent FROM emails_with_events) as replace) as new GROUP BY id) e2 WHERE e.id = e2.id
    mongo:
      method: find
      query:
        id: c0b7a14f34d345eda2666d5159c288de
    description: "Update event city where null"

  - sql: SELECT first.id, second.id, first.fromemail, first.toemail, (first.events::jsonb || second.events::jsonb) as joined FROM (SELECT id, (data ->> 'from') as fromemail, (data ->> 'to') as toemail, (data -> 'events') as events FROM emails_with_events) first JOIN (SELECT id, (data ->> 'from') as fromemail, (data ->> 'to') as toemail, (data -> 'events') as events FROM emails_with_events) second ON first.fromemail = second.fromemail AND first.toemail = second.toemail AND first.id != second.id
    mongo:
      method: find
      query:
        id: c0b7a14f34d345eda2666d5159c288de
    description: "Join events where from and to emails match"

  - sql: SELECT id, device, count(singleevent) as events FROM (SELECT id, json_array_elements(data -> 'events') as singleevent, json_array_elements(data -> 'events') -> 'user_agent' ->> 'platform' as device FROM emails_with_events) as eventarray  GROUP BY id, device
    mongo:
      method: find
      query:
        id: c0b7a14f34d345eda2666d5159c288de
    description: "Count events for email by device"

  - sql: SELECT * FROM (SELECT id, max(longitude::decimal) as singlemax FROM (SELECT id, json_array_elements(data -> 'events') as singleevent, json_array_elements(data -> 'events') -> 'position' -> 'geographical' ->> 'long' as longitude FROM emails_with_events) as eventarray  GROUP BY id) maxwithid WHERE singlemax=(SELECT max(longitude::decimal) FROM (SELECT id, json_array_elements(data -> 'events') as singleevent, json_array_elements(data -> 'events') -> 'position' -> 'geographical' ->> 'long' as longitude FROM emails_with_events) as localmax)
    mongo:
      method: find
      query:
        id: c0b7a14f34d345eda2666d5159c288de
    description: "Select email with max longitude event"

  - sql: SELECT * FROM (SELECT id, min(latitude::decimal) as singlemin FROM (SELECT id, json_array_elements(data -> 'events') as singleevent, json_array_elements(data -> 'events') -> 'position' -> 'geographical' ->> 'lat' as latitude FROM emails_with_events) as eventarray  GROUP BY id) maxwithid WHERE singlemin=(SELECT min(latitude::decimal) FROM (SELECT id, json_array_elements(data -> 'events') as singleevent, json_array_elements(data -> 'events') -> 'position' -> 'geographical' ->> 'lat' as latitude FROM emails_with_events) as localmax)
    mongo:
      method: find
      query:
        id: c0b7a14f34d345eda2666d5159c288de
    description: "Select email with min latitude event"

  - sql: SELECT count(*) FROM emails_with_events WHERE id in (SELECT id FROM emails_with_events WHERE (data -> 'sent')::jsonb ? 'timezone'::text)
    mongo:
      method: find
      query:
        id: c0b7a14f34d345eda2666d5159c288de
    description: "Count emails where timezone exists in sent"

  - sql: SELECT count(*) FROM emails_with_events WHERE id in (SELECT DISTINCT id FROM (SELECT id, json_array_elements(data -> 'events') -> 'position' as position FROM emails_with_events) as events WHERE position::jsonb ? 'timezone'::text)
    mongo:
      method: find
      query:
        id: c0b7a14f34d345eda2666d5159c288de
    description: "Count emails where timezone exists in position of event"
